// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  pages    Page[]
  folders  Folder[]
  items    Item[]

  @@unique([id])
}

enum ItemType {
  FOLDER
  PAGE
}

model Item {
  id       String   @id @default(uuid()) // ID as a string type
  name     String
  itemType ItemType
  title    String   @default("new item")
  content  String?
  userId   Int
  parentId String?
  parent   Item?    @relation("ParentChildren", fields: [parentId], references: [id])
  children Item[]   @relation("ParentChildren")
  user     User     @relation(fields: [userId], references: [id])
}

model Page {
  id       Int     @id @default(autoincrement())
  content  Json
  title    String  @default("new page")
  parentId Int?
  userId   Int
  folder   Folder? @relation(fields: [parentId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
  order    Int

  @@unique([userId, parentId, title])
  @@unique([userId, parentId, order])
}

model Folder {
  id       Int      @id @default(autoincrement())
  title    String
  parentId Int?
  pages    Page[]
  order    Int
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("FolderHierarchy")

  @@unique([userId, order, parentId])
}

model Book {
  id          Int         @id @default(autoincrement())
  title       String
  userId      Int
  description String?
  wordEntries WordEntry[]
}

model WordEntry {
  id        Int      @id @default(autoincrement())
  wordCount Int
  date      DateTime
  bookId    Int
  Book      Book     @relation(fields: [bookId], references: [id])
}
